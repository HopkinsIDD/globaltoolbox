} else if (length(best_)==0 & return_score_matrix){
return(dists)
}
if (length(best_>1)){
iso <- paste(country_names$ISO3[best_], collapse=", ")
country <- paste(country_names$country_std[best_], collapse=", ")
} else {
iso <- country_names$ISO3[best_]
country <- country_names$country_std[best_]
}
if (!return_country_name & !return_score){
return(iso)
} else if (return_score & !return_country_name){
return(list(iso=iso, score_sum=score_sum))
} else if (return_score & return_country_name){
return(list(iso=iso, country=country, score_sum=score_sum))
} else if (return_country_name & !return_score){
return(list(iso=iso, country=country))
}
best_match_country(a=test_country_name, coutry_names=country_names, return_ISO=FALSE,
return_country_name=TRUE, return_score=FALSE, return_score_matrix=FALSE)
best_match_country(a=test_country_name, country_names=country_names, return_ISO=FALSE,
return_country_name=TRUE, return_score=FALSE, return_score_matrix=FALSE)
?stringdist
#' @name best_match_country
#' @title best_match_country
#' @description use stringdist to get best match for country name
#' @param a
#' @param b
#' @return
#' @importFrom stringdist stringdist
#' @export
best_match_country <- function(a, country_names=country_names,
return_ISO=TRUE, return_country_name=FALSE,
return_score=FALSE, return_score_matrix=FALSE){
a <- tolower(a)
b <- tolower(country_names$name)
methods <- c("osa", "lv", "dl", "lcs", "qgram", "cosine", "jaccard", "jw", "soundex")
dists <- as.data.frame(matrix(NA, nrow=length(b), ncol=length(methods),
dimnames=list(b, methods)))
for (j in 1:length(methods)){
dists[,j]  <- suppressWarnings(stringdist(a, b, method=methods[j]))
}
dists$score_sums <- rowSums(dists)
dists$osa <- as.integer(dists$osa)
best_ <- NULL
# get best from results
if (any(dists$osa<=1)){
best_ <- which.min(dists$score_sums)
} else if (any(dists$jw<=.1)){
best_ <- which.min(dists$score_sums)
} else if (any(dists$osa<=3 & dists$jw<=0.31 & dists$soundex == 0)){
best_ <- which(dists$osa<=3 & dists$jw<=0.31 & dists$soundex==0)
}
if (length(best_)==0 & !return_score_matrix){
return(NA)
} else if (length(best_)==0 & return_score_matrix){
return(dists)
}
if (length(best_>1)){
iso <- paste(country_names$ISO3[best_], collapse=", ")
country <- paste(country_names$country_std[best_], collapse=", ")
} else {
iso <- country_names$ISO3[best_]
country <- country_names$country_std[best_]
}
if (!return_country_name & !return_score){
return(iso)
} else if (return_score & !return_country_name){
return(list(iso=iso, score_sum=score_sum))
} else if (return_score & return_country_name){
return(list(iso=iso, country=country, score_sum=score_sum))
} else if (return_country_name & !return_score){
return(list(iso=iso, country=country))
}
best_match_country(a=test_country_name, country_names=country_names, return_ISO=FALSE,
return_country_name=TRUE, return_score=FALSE, return_score_matrix=FALSE)
#' @name best_match_country
#' @title best_match_country
#' @description use stringdist to get best match for country name
#' @param a
#' @param b
#' @return
#' @importFrom stringdist stringdist
#' @export
best_match_country <- function(a, country_names=country_names,
return_ISO=TRUE, return_country_name=FALSE,
return_score=FALSE, return_score_matrix=FALSE){
a <- tolower(a)
b <- tolower(country_names$name)
methods <- c("osa", "lv", "dl", "lcs", "qgram", "cosine", "jaccard", "jw", "soundex")
dists <- as.data.frame(matrix(NA, nrow=length(b), ncol=length(methods),
dimnames=list(b, methods)))
for (j in 1:length(methods)){
dists[,j]  <- suppressWarnings(stringdist(a, b, method=methods[j]))
}
dists$score_sums <- rowSums(dists)
dists$osa <- as.integer(dists$osa)
best_ <- NULL
# get best from results
if (any(dists$osa<=1)){
best_ <- which.min(dists$score_sums)
} else if (any(dists$jw<=.1)){
best_ <- which.min(dists$score_sums)
} else if (any(dists$osa<=3 & dists$jw<=0.31 & dists$soundex == 0)){
best_ <- which(dists$osa<=3 & dists$jw<=0.31 & dists$soundex==0)
}
if (length(best_)==0 & !return_score_matrix){
return(NA)
} else if (length(best_)==0 & return_score_matrix){
return(dists)
}
if (length(best_>1)){
iso <- paste(country_names$ISO3[best_], collapse=", ")
country <- paste(country_names$country_std[best_], collapse=", ")
} else {
iso <- country_names$ISO3[best_]
country <- country_names$country_std[best_]
}
# Return only ISO
if (!return_country_name & !return_score){
return(iso)
# Return only Country Name
} else if (return_country_name & !return_ISO & !return_score){
return(country)
# Return ISO and Score
} else if (return_score & !return_country_name){
return(list(iso=iso, score_sum=score_sum))
# Return ISO, Score, Country Name
} else if (return_score & return_country_name){
return(list(iso=iso, country=country, score_sum=score_sum))
# Return ISO and Country Name
} else if (return_country_name & !return_score){
return(list(iso=iso, country=country))
}
best_match_country(a=test_country_name, country_names=country_names, return_ISO=FALSE,
return_country_name=TRUE, return_score=FALSE, return_score_matrix=FALSE)
sapply(X=test_country_names, FUN=best_match_country, country_names=country_names, return_ISO=FALSE,
return_country_name=TRUE, return_score=FALSE, return_score_matrix=FALSE)
a <- str_replace_all(a, "[[:punct:]]", "") # remove all punctuation
a
str_replace_all
#' @name best_match_country
#' @title best_match_country
#' @description use stringdist to get best match for country name
#' @param a
#' @param b
#' @return
#' @importFrom stringdist stringdist
#' @importFrom stringr str_replace_all
#' @export
best_match_country <- function(a, country_names=country_names,
return_ISO=TRUE, return_country_name=FALSE,
return_score=FALSE, return_score_matrix=FALSE){
a <- tolower(a)
a <- str_replace_all(a, "[[:punct:]]", "") # remove all punctuation
b <- tolower(country_names$name)
methods <- c("osa", "lv", "dl", "lcs", "qgram", "cosine", "jaccard", "jw", "soundex")
dists <- as.data.frame(matrix(NA, nrow=length(b), ncol=length(methods),
dimnames=list(b, methods)))
for (j in 1:length(methods)){
dists[,j]  <- suppressWarnings(stringdist(a, b, method=methods[j]))
}
dists$score_sums <- rowSums(dists)
dists$osa <- as.integer(dists$osa)
best_ <- NULL
# get best from results
if (any(dists$osa<=1)){
best_ <- which.min(dists$score_sums)
} else if (any(dists$jw<=.1)){
best_ <- which.min(dists$score_sums)
} else if (any(dists$osa<=3 & dists$jw<=0.31 & dists$soundex == 0)){
best_ <- which(dists$osa<=3 & dists$jw<=0.31 & dists$soundex==0)
}
if (length(best_)==0 & !return_score_matrix){
return(NA)
} else if (length(best_)==0 & return_score_matrix){
return(dists)
}
if (length(best_>1)){
iso <- paste(country_names$ISO3[best_], collapse=", ")
country <- paste(country_names$country_std[best_], collapse=", ")
} else {
iso <- country_names$ISO3[best_]
country <- country_names$country_std[best_]
}
# Return only ISO
if (!return_country_name & !return_score){
return(iso)
# Return only Country Name
} else if (return_country_name & !return_ISO & !return_score){
return(country)
# Return ISO and Score
} else if (return_score & !return_country_name){
return(list(iso=iso, score_sum=score_sum))
# Return ISO, Score, Country Name
} else if (return_score & return_country_name){
return(list(iso=iso, country=country, score_sum=score_sum))
# Return ISO and Country Name
} else if (return_country_name & !return_score){
return(list(iso=iso, country=country))
}
best_match_country(a=test_country_name, country_names=country_names, return_ISO=FALSE,
return_country_name=TRUE, return_score=FALSE, return_score_matrix=FALSE)
sapply(X=test_country_names, FUN=best_match_country, country_names=country_names, return_ISO=FALSE,
return_country_name=TRUE, return_score=FALSE, return_score_matrix=FALSE)
country_names <- country_names_df %>% mutate(country_std=Country) %>% gather(key="name_type", value="name", -ISO3, -country_std, -ID)
# Add "America" to USA
country_names[country_names$ISO3=="USA",]
# Add "America" to USA
country_names <- rbind(country_names, c(country_names[country_names$ISO3=="USA",1:3], "America"))
c(country_names[country_names$ISO3=="USA",1:3], "America")
country_names$ISO3=="USA"
# Add "America" to USA
country_names <- rbind(country_names, c(country_names[country_names$ISO3=="USA",1:3][1,], "America"))
c(country_names[country_names$ISO3=="USA",1:3][1,], "America")
# Add "America" to USA
country_names <- rbind(country_names, as.vector(c(country_names[country_names$ISO3=="USA",1:3][1,], "America")))
as.vector(c(country_names[country_names$ISO3=="USA",1:3][1,], "America"))
which(country_names$ISO3=="USA")[1]
country_names[which(country_names$ISO3=="USA")[1],1:3]
c(country_names[which(country_names$ISO3=="USA")[1],1:3], "America")
c(country_names[which(country_names$ISO3=="USA")[1],1:3], name="America")
# Add "America" to USA
country_names <- rbind(country_names, as.vector(c(country_names[which(country_names$ISO3=="USA")[1],1:3], name="America")))
as.vector(c(country_names[which(country_names$ISO3=="USA")[1],1:3], name="America"))
# Add "America" to USA
country_names <- rbind(country_names, as.vector(c(country_names[which(country_names$ISO3=="USA")[1],1:3],
name_type=="added1", name="America")))
# Add "America" to USA
country_names <- rbind(country_names, as.vector(c(country_names[which(country_names$ISO3=="USA")[1],1:3],
name_type="added1", name="America")))
# Get rid of duplicates
name_types <- colnames(country_names_df[-(1:2)])
country_names <- country_names %>% mutate(name_type=factor(name_type, levels=name_types, labels = name_types)) %>%
arrange(ISO3, name_type) %>%
mutate(duplic_name=duplicated(toupper(name)))
country_names <- country_names %>% filter(duplic_name==FALSE) %>% select(-duplic_name)
# Get rid of duplicates
name_types <- unique(country_names$name_type)
name_types
# Convert to long -- easier to search
country_names <- country_names_df %>% mutate(country_std=Country) %>% gather(key="name_type", value="name", -ISO3, -country_std, -ID)
country_names <- country_names %>% filter(!is.na(name) & name!="" & name!=" ")
# Add "America" to USA
country_names <- rbind(country_names, as.vector(c(country_names[which(country_names$ISO3=="USA")[1],1:3],
name_type="added1", name="America")))
# Get rid of duplicates
name_types <- unique(country_names$name_type)
name_types
country_names <- country_names %>% mutate(name_type=factor(name_type, levels=name_types, labels = name_types)) %>%
arrange(ISO3, name_type) %>%
mutate(duplic_name=duplicated(toupper(name)))
country_names <- country_names %>% filter(duplic_name==FALSE) %>% select(-duplic_name)
country_iso <- country_names_df %>% select(ISO=ISO3, Country)
# Save names data
usethis::use_data(country_iso, overwrite = TRUE)
usethis::use_data(country_names, overwrite = TRUE)
usethis::use_data(country_name_list, overwrite = TRUE)
best_match_country(a=test_country_name, country_names=country_names, return_ISO=FALSE,
return_country_name=TRUE, return_score=FALSE, return_score_matrix=FALSE)
sapply(X=test_country_names, FUN=best_match_country, country_names=country_names, return_ISO=FALSE,
return_country_name=TRUE, return_score=FALSE, return_score_matrix=FALSE)
#' @name match_country
#' @title match_country
#' @description use stringdist to get best match for country name
#' @param a
#' @param b
#' @return
#' @importFrom stringdist stringdist
#' @importFrom stringr str_replace_all
#' @export
match_country <- function(a, country_names=country_names,
return_ISO=TRUE, return_country_name=FALSE,
return_score=FALSE, return_score_matrix=FALSE){
a <- tolower(a)
a <- str_replace_all(a, "[[:punct:]]", "") # remove all punctuation
b <- tolower(country_names$name)
methods <- c("osa", "lv", "dl", "lcs", "qgram", "cosine", "jaccard", "jw", "soundex")
dists <- as.data.frame(matrix(NA, nrow=length(b), ncol=length(methods),
dimnames=list(b, methods)))
for (j in 1:length(methods)){
dists[,j]  <- suppressWarnings(stringdist(a, b, method=methods[j]))
}
dists$score_sums <- rowSums(dists)
dists$osa <- as.integer(dists$osa)
best_ <- NULL
# get best from results
if (any(dists$osa<=1)){
best_ <- which.min(dists$score_sums)
} else if (any(dists$jw<=.1)){
best_ <- which.min(dists$score_sums)
} else if (any(dists$osa<=3 & dists$jw<=0.31 & dists$soundex == 0)){
best_ <- which(dists$osa<=3 & dists$jw<=0.31 & dists$soundex==0)
}
if (length(best_)==0 & !return_score_matrix){
return(NA)
} else if (length(best_)==0 & return_score_matrix){
return(dists)
}
if (length(best_>1)){
iso <- paste(country_names$ISO3[best_], collapse=", ")
country <- paste(country_names$country_std[best_], collapse=", ")
} else {
iso <- country_names$ISO3[best_]
country <- country_names$country_std[best_]
}
# Return only ISO
if (!return_country_name & !return_score){
return(iso)
# Return only Country Name
} else if (return_country_name & !return_ISO & !return_score){
return(country)
# Return ISO and Score
} else if (return_score & !return_country_name){
return(list(iso=iso, score_sum=score_sum))
# Return ISO, Score, Country Name
} else if (return_score & return_country_name){
return(list(iso=iso, country=country, score_sum=score_sum))
# Return ISO and Country Name
} else if (return_country_name & !return_score){
return(list(iso=iso, country=country))
}
# Get ISO3 from Country Name
#' @name get.iso
#' @title get.iso
#' @description get the official ISO for a vector of countries. This will identify most likely matched
#' to the inputted country names used a variety of tools and methods.
#' @param country vector of country names
#' @param b
#' @return vector of ISOs for each country. These can then be used to identify other characteristics of the country
#' @importFrom countrycode countrycode
#' @export
get.iso <- function(country, ISO.only=T){
country <- tolower(country)
#country <- str_replace_all(country, "[[:punct:]]", "") # remove all punctuation
# just check the unique countries to speed it up
country_all <- country
country <- unique(country)
country_indexes <- match(country_all, country)
# First try "countrycode" package
ISO <- countrycode(country, 'country.name', 'iso3c')
# If not completely successful, try using "match_country" function
if (sum(is.na(ISO))!=0){
isos_need_match <- is.na(ISO)
match_attempt2 <- as.character(sapply(country[isos_need_match], match_country))
# fill in new matches and get matches needed again
ISO[isos_need_match][!is.na(match_attempt2)] <- match_attempt2[!is.na(match_attempt2)]
}
return(ISO[country_indexes])
}
# Get ISO3 from Country Name
#' @name get.iso
#' @title get.iso
#' @description get the official ISO for a vector of countries. This will identify most likely matched
#' to the inputted country names used a variety of tools and methods.
#' @param country vector of country names
#' @param b
#' @return vector of ISOs for each country. These can then be used to identify other characteristics of the country
#' @importFrom countrycode countrycode
#' @export
get.iso <- function(country){
country <- tolower(country)
#country <- str_replace_all(country, "[[:punct:]]", "") # remove all punctuation
# just check the unique countries to speed it up
country_all <- country
country <- unique(country)
country_indexes <- match(country_all, country)
# First try "countrycode" package
ISO <- countrycode(country, 'country.name', 'iso3c')
# If not completely successful, try using "match_country" function
if (sum(is.na(ISO))!=0){
isos_need_match <- is.na(ISO)
match_attempt2 <- as.character(sapply(country[isos_need_match], match_country))
# fill in new matches and get matches needed again
ISO[isos_need_match][!is.na(match_attempt2)] <- match_attempt2[!is.na(match_attempt2)]
}
return(ISO[country_indexes])
}
# Example
# data('test_country_names',package='globaltoolbox')
get.iso(country=test_country_names)
country=test_country_names
country <- tolower(country)
# just check the unique countries to speed it up
country_all <- country
country <- unique(country)
country_indexes <- match(country_all, country)
# First try "countrycode" package
ISO <- countrycode(country, 'country.name', 'iso3c')
ISO
# First try "countrycode" package
ISO <- suppressWarnings(countrycode(country, 'country.name', 'iso3c'))
is.na(ISO)
isos_need_match <- is.na(ISO)
isos_need_match
as.character(sapply(country[isos_need_match], match_country))
country[isos_need_match]
match_country
match_attempt2 <- as.character(sapply(X=country[isos_need_match], FUN=match_country))
sapply(X=test_country_names[isos_need_match], FUN=match_country, country_names=country_names, return_ISO=FALSE,
return_country_name=TRUE, return_score=FALSE, return_score_matrix=FALSE)
sapply(X=country[isos_need_match], FUN=match_country)
match_attempt2 <- as.character(sapply(X=country[isos_need_match],
FUN=match_country,
country_names=country_names))
match_attempt2
# Get ISO3 from Country Name
#' @name get.iso
#' @title get.iso
#' @description get the official ISO for a vector of countries. This will identify most likely matched
#' to the inputted country names used a variety of tools and methods.
#' @param country vector of country names
#' @param b
#' @return vector of ISOs for each country. These can then be used to identify other characteristics of the country
#' @importFrom countrycode countrycode
#' @export
get.iso <- function(country){
country <- tolower(country)
#country <- str_replace_all(country, "[[:punct:]]", "") # remove all punctuation
# just check the unique countries to speed it up
country_all <- country
country <- unique(country)
country_indexes <- match(country_all, country)
# First try "countrycode" package
ISO <- suppressWarnings(countrycode(country, 'country.name', 'iso3c'))
# If not completely successful, try using "match_country" function
if (sum(is.na(ISO))!=0){
isos_need_match <- is.na(ISO)
match_attempt2 <- as.character(sapply(X=country[isos_need_match],
FUN=match_country,
country_names=country_names))
# fill in new matches
ISO[isos_need_match] <- match_attempt2
}
return(ISO[country_indexes])
}
# Get ISO3 from Country Name
#' @name get.iso
#' @title get.iso
#' @description get the official ISO for a vector of countries. This will identify most likely matched
#' to the inputted country names used a variety of tools and methods.
#' @param country vector of country names
#' @param b
#' @return vector of ISOs for each country. These can then be used to identify other characteristics of the country
#' @importFrom countrycode countrycode
#' @export
get.iso <- function(country){
country <- tolower(country)
#country <- str_replace_all(country, "[[:punct:]]", "") # remove all punctuation
# just check the unique countries to speed it up
country_all <- country
country <- unique(country)
country_indexes <- match(country_all, country)
# First try "countrycode" package
ISO <- suppressWarnings(countrycode(country, 'country.name', 'iso3c'))
# If not completely successful, try using "match_country" function
if (sum(is.na(ISO))!=0){
isos_need_match <- is.na(ISO)
match_attempt2 <- as.character(sapply(X=country[isos_need_match],
FUN=match_country,
country_names=country_names))
# fill in new matches
ISO[isos_need_match] <- match_attempt2
}
return(ISO[country_indexes])
}
# Example
# data('test_country_names',package='globaltoolbox')
get.iso(country=test_country_names)
testB <- get.iso(country=test_country_names)
testA <- sapply(X=test_country_names, FUN=match_country, country_names=country_names, return_ISO=FALSE,
return_country_name=TRUE, return_score=FALSE, return_score_matrix=FALSE)
testA <- sapply(X=test_country_names, FUN=match_country, country_names=country_names, return_ISO=TRUE,
return_country_name=FALSE, return_score=FALSE, return_score_matrix=FALSE)
cbind(testA, testB)
all.equal(testA, testB)
is.equal(testA, testB)
all.equal(testA, testB[-3])
View(country_codes)
View(region_data)
region_data <- NULL
# Get Country Codes, Regions,
tryCatch({
region_data      <- read.csv("https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv", stringsAsFactors=FALSE, na.strings = c(""," ","NA"))
who_regions      <- read.csv("data-raw/who_regions.csv", stringsAsFactors=FALSE, na.strings = c(""," ","NA"))
region_data_2    <- rworldmap::countryRegions
},
error= function(x) print('No Internet Connection')
)
# Check for missing ISOs
sum(is.na(region_data$iso))
sum(is.na(region_data_2$iso))
sum(is.na(who_regions$iso))
region_data$name <- iconv(region_data$name, from = 'UTF-8', to = 'ASCII//TRANSLIT')
region_data <- full_join(region_data %>% select(iso=alpha.3, country=name, region:intermediate.region.code),
who_regions %>% select(iso, country2=country, who.region, who.region.mortality=region.mortality),
by=c("iso"="iso")) %>% as.data.frame()
region_data <- full_join(region_data,
region_data_2 %>% select(ISO3, country3=ADMIN, continent, REGION, GEO3major, GEO3, GLOCAF, Stern, SRESmajor, SRES, GBD),
by=c("iso"="ISO3")) %>% as.data.frame()
View(region_data)
# Combine added country names
region_data$country[is.na(region_data$country) & !is.na(region_data$country2)] <-
region_data$country2[is.na(region_data$country) & !is.na(region_data$country2)]
region_data$country[is.na(region_data$country) & !is.na(region_data$country3)] <-
region_data$country3[is.na(region_data$country) & !is.na(region_data$country3)]
region_data <- region_data %>% select(-country2, -country3) %>% rename(ISO3=iso)
View(region_data)
#write.csv(region_data, 'data/region_data.csv', row.names = FALSE)
usethis::use_data(region_data, overwrite = TRUE)
devtools::document()
